package egovframework.appn.sys.user.urm.web;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.ModelAndView;
import org.springmodules.validation.commons.DefaultBeanValidator;

import com.fasterxml.jackson.databind.ObjectMapper;

import egovframework.appn.cmm.excel.ExcelView;
import egovframework.appn.sys.menu.plm.service.AuthorVO;
import egovframework.appn.sys.menu.plm.service.ProgrmManageService;
import egovframework.appn.sys.user.urm.service.UserDefaultVO;
import egovframework.appn.sys.user.urm.service.UserManageService;
import egovframework.appn.sys.user.urm.service.UserManageVO;
import egovframework.appn.utl.sim.service.FileScrty;
import egovframework.com.cmm.ComDefaultCodeVO;
import egovframework.com.cmm.EgovMessageSource;
import egovframework.com.cmm.LoginVO;
import egovframework.com.cmm.service.CmmUseService;
import egovframework.rte.fdl.property.EgovPropertyService;
import egovframework.rte.ptl.mvc.tags.ui.pagination.PaginationInfo;

/**
 * 업무사용자관련 요청을  비지니스 클래스로 전달하고 처리된결과를  해당   웹 화면으로 전달하는  Controller를 정의한다
 * @author 공통서비스 개발팀 조재영
 * @since 2009.04.10
 * @version 1.0
 * @see
 *
 * <pre>
 * << 개정이력(Modification Information) >>
 *
 *   수정일      수정자           수정내용
 *  -------    --------    ---------------------------
 *   2009.04.10  조재영          최초 생성
 *   2011.08.31  JJY            경량환경 템플릿 커스터마이징버전 생성
 *
 * </pre>
 */
@Controller
public class UserManageController {

	/** userManageService */
	@Resource(name = "userManageService")
	private UserManageService userManageService;

	@Resource(name = "progrmManageService")
	private ProgrmManageService progrmManageService;

	/** cmmUseService */
	@Resource(name = "CmmUseService")
	private CmmUseService cmmUseService;

	/** EgovMessageSource */
	@Resource(name = "egovMessageSource")
	EgovMessageSource egovMessageSource;

	/** EgovPropertyService */
	@Resource(name = "propertiesService")
	protected EgovPropertyService propertiesService;

	/** DefaultBeanValidator beanValidator */
	@Autowired
	private DefaultBeanValidator beanValidator;

	@Resource(name = "excelView")
    private ExcelView excelView;


	/**
	 * 엑셀다운로드
	 * @param userSearchVO
	 * @param model
	 * @return
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/UserManageExcel.do")
	public ModelAndView boardListExcel(@ModelAttribute("userSearchVO") UserDefaultVO userSearchVO, ModelMap model) throws Exception{

		ModelAndView mav = new ModelAndView(excelView);
	    Map<String, Object> dataMap = new HashMap<String, Object>();

	    List<?> list = userManageService.selectUserListExcel(userSearchVO);
	    String filename = "사용자관리 목록_" + new SimpleDateFormat("yyyyMMddhhmmss").format(new Date());
	    String[] columnArr = {"아이디", "사용자이름", "이메일", "기관코드", "핸드폰번호", "상태"};
	    String[] columnVarArr = {"userId", "userNm", "emailAdres", "pstInst", "moblphonNo", "sttus"};

	    dataMap.put("columnArr", columnArr);
	    dataMap.put("columnVarArr", columnVarArr);
	    dataMap.put("sheetNm", "사용자관리 목록");
	    dataMap.put("list", list);

	    mav.addObject("dataMap", dataMap);
	    mav.addObject("filename", filename);

	    return mav;
	}

	/**
	 * 사용자목록을 조회한다. (pageing)
	 * @param userSearchVO 검색조건정보
	 * @param model 화면모델
	 * @return cmm/uss/umt/EgovUserManage
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/UserManage.do")
	public String selectUserList(@ModelAttribute("userSearchVO") UserDefaultVO userSearchVO, ModelMap model, @ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {


		/** EgovPropertyService */
		userSearchVO.setPageUnit(propertiesService.getInt("pageUnit"));
		userSearchVO.setPageSize(propertiesService.getInt("pageSize"));

		/** pageing */
		PaginationInfo paginationInfo = new PaginationInfo();
		paginationInfo.setCurrentPageNo(userSearchVO.getPageIndex());
		paginationInfo.setRecordCountPerPage(userSearchVO.getRecordCountPerPage());
		paginationInfo.setPageSize(userSearchVO.getPageSize());

		userSearchVO.setFirstIndex(paginationInfo.getFirstRecordIndex());
		userSearchVO.setLastIndex(paginationInfo.getLastRecordIndex());
		userSearchVO.setRecordCountPerPage(paginationInfo.getRecordCountPerPage());

		AuthorVO authorVO = new AuthorVO();
		authorVO.setCodeId("COM003");

		model.addAttribute("tree", new ObjectMapper().writeValueAsString(progrmManageService.selectTreeCodeList(authorVO)));
		model.addAttribute("resultList", new ObjectMapper().writeValueAsString(userManageService.selectUserList(userSearchVO)));

		int totCnt = userManageService.selectUserListTotCnt(userSearchVO);
		paginationInfo.setTotalRecordCount(totCnt);
		model.addAttribute("paginationInfo", paginationInfo);

		//사용자상태코드를 코드정보로부터 조회
		ComDefaultCodeVO vo = new ComDefaultCodeVO();
		vo.setCodeId("COM001");
		model.addAttribute("emplyrSttusCode_result", cmmUseService.selectCmmCodeDetail(vo));
		model.addAttribute("UserStatusCode", new ObjectMapper().writeValueAsString(cmmUseService.selectCmmCodeDetail(vo)));

		//소속기관을 코드정보로부터 조회
		vo.setCodeId("COM003");
		model.addAttribute("pstInstCode_result", cmmUseService.selectCmmCodeDetail(vo));

		model.addAttribute("userManageVO", userManageVO);

		return "sys/user/urm/UserManage";
	}

	/**
	 * 사용자등록화면으로 이동한다.
	 * @param userSearchVO 검색조건정보
	 * @param userManageVO 사용자초기화정보
	 * @param model 화면모델
	 * @return cmm/uss/umt/EgovUserInsert
	 * @throws Exception
	 */
	@RequestMapping("/sys/user/urm/UserInsertView.do")
	public String insertUserView(@ModelAttribute("userSearchVO") UserDefaultVO userSearchVO, @ModelAttribute("userManageVO") UserManageVO userManageVO, Model model, HttpServletRequest req)
			throws Exception {


		Boolean isAdmin = false;
    	LoginVO loginvo = (LoginVO) req.getSession().getAttribute("LoginVO");
    	isAdmin = loginvo.getAuthorCode().equals(("ROLE_ADMIN"));
    	model.addAttribute("isAdmin", isAdmin);

		ComDefaultCodeVO vo = new ComDefaultCodeVO();

		//사용자상태코드를 코드정보로부터 조회
		vo.setCodeId("COM001");
		model.addAttribute("emplyrSttusCode_result", cmmUseService.selectCmmCodeDetail(vo));

		//패스워드힌트목록을 코드정보로부터 조회
		vo.setCodeId("COM002");
		model.addAttribute("region_result", cmmUseService.selectCmmCodeDetail(vo));

		//소속기관코드를 코드정보로부터 조회
		vo.setCodeId("COM003");
		model.addAttribute("insttCode_result", cmmUseService.selectCmmCodeDetail(vo));

     	//전화번호 앞자리 공통코드
     	vo.setCodeId("COM015");
     	model.addAttribute("com015", cmmUseService.selectCmmCodeDetail(vo));

		//그룹정보를 조회 - GROUP_ID정보
		vo.setTableNm("Z_AUTHOR_GROUP_INFO");
		model.addAttribute("groupId_result", cmmUseService.selectGroupIdDetail(vo));

		model.addAttribute("authorList", progrmManageService.selectAuthorList());


		return "sys/user/urm/UserInsert";
	}

	/**
	 * 사용자등록처리후 목록화면으로 이동한다.
	 * @param userManageVO 사용자등록정보
	 * @param bindingResult 입력값검증용 bindingResult
	 * @param model 화면모델
	 * @return forward:/uss/umt/user/EgovUserManage.do
	 * @throws Exception
	 */
	@RequestMapping("/sys/user/urm/UserInsert.do")
	public String insertUser(@ModelAttribute("userManageVO") UserManageVO userManageVO, BindingResult bindingResult, Model model) throws Exception {

		userManageService.insertUser(userManageVO);
		model.addAttribute("resultMsg", "success.common.insert");

		return "forward:/sys/user/urm/UserManage.do";
	}

	/**
	 * 사용자정보 수정을 위해 사용자정보를 상세조회한다.
	 * @param uniqId 상세조회대상 사용자아이디
	 * @param userSearchVO 검색조건
	 * @param model 화면모델
	 * @return cmm/uss/umt/EgovUserSelectUpdt
	 * @throws Exception
	 */
	@RequestMapping("/sys/user/urm/UserSelectUpdtView.do")
	public String updateUserView(@RequestParam(value="reqFlag", required=false) String reqFlag, @RequestParam("selectedId") String uniqId, @ModelAttribute("searchVO") UserDefaultVO userSearchVO, Model model) throws Exception {


		ComDefaultCodeVO vo = new ComDefaultCodeVO();

		//사용자상태코드를 코드정보로부터 조회
		vo.setCodeId("COM001");
		model.addAttribute("emplyrSttusCode_result", cmmUseService.selectCmmCodeDetail(vo));

		//패스워드힌트목록을 코드정보로부터 조회
		vo.setCodeId("COM002");
		model.addAttribute("region_result", cmmUseService.selectCmmCodeDetail(vo));

		//소속기관코드를 코드정보로부터 조회
		vo.setCodeId("COM003");
		model.addAttribute("insttCode_result", cmmUseService.selectCmmCodeDetail(vo));

     	//전화번호 앞자리 공통코드
     	vo.setCodeId("COM015");
     	model.addAttribute("com015", cmmUseService.selectCmmCodeDetail(vo));

		//그룹정보를 조회 - GROUP_ID정보
		vo.setTableNm("Z_AUTHOR_GROUP_INFO");
		model.addAttribute("groupId_result", cmmUseService.selectGroupIdDetail(vo));

		model.addAttribute("authorList", progrmManageService.selectAuthorList());

		UserManageVO userManageVO = new UserManageVO();
		userManageVO = userManageService.selectUser(uniqId);
		model.addAttribute("userSearchVO", userSearchVO);
		model.addAttribute("userManageVO", userManageVO);
		model.addAttribute("reqFlag", reqFlag);


		return "sys/user/urm/UserSelectUpdt";
	}

	/**
	 * 사용자정보 수정후 목록조회 화면으로 이동한다.
	 * @param userManageVO 사용자수정정보
	 * @param bindingResult 입력값검증용 bindingResult
	 * @param model 화면모델
	 * @return forward:/uss/umt/user/EgovUserManage.do
	 * @throws Exception
	 */
	@RequestMapping("/sys/user/urm/UserSelectUpdt.do")
	public String updateUser(@ModelAttribute("userManageVO") UserManageVO userManageVO, BindingResult bindingResult, Model model, HttpServletRequest req) throws Exception {


    	String resultMsg = "success.common.update";

		userManageService.updateUser(userManageVO);
		model.addAttribute("resultMsg", resultMsg);
		return "forward:/sys/user/urm/UserSelectUpdtView.do?selectedId="+userManageVO.getUniqId();
	}

	/**
	 * 사용자정보삭제후 목록조회 화면으로 이동한다.
	 * @param checkedIdForDel 삭제대상아이디 정보
	 * @param userSearchVO 검색조건
	 * @param model 화면모델
	 * @return forward:/uss/umt/user/EgovUserManage.do
	 * @throws Exception
	 */
	@RequestMapping("/sys/user/urm/UserDelete.do")
	public String deleteUser(@RequestParam("checkedIdForDel") String checkedIdForDel, @ModelAttribute("searchVO") UserDefaultVO userSearchVO, Model model) throws Exception {


		userManageService.deleteUser(checkedIdForDel);
		//Exception 없이 진행시 등록성공메시지
		model.addAttribute("resultMsg", "success.common.delete");
		return "forward:/sys/user/urm/UserManage.do";
	}

	/**
	 * 입력한 사용자아이디의 중복확인화면 이동
	 * @param model 화면모델
	 * @return cmm/uss/umt/EgovIdDplctCnfirm
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/IdDplctCnfirmView.do")
	public String checkIdDplct(ModelMap model) throws Exception {

		model.addAttribute("checkId", "");
		model.addAttribute("usedCnt", "-1");
		return "sys/user/urm/IdDplctCnfirm.empty";
	}

	/**
	 * 입력한 사용자아이디의 중복여부를 체크하여 사용가능여부를 확인
	 * @param commandMap 파라메터전달용 commandMap
	 * @param model 화면모델
	 * @return cmm/uss/umt/EgovIdDplctCnfirm
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/IdDplctCnfirm.do")
	public String checkIdDplct(@RequestParam Map<String, Object> commandMap, ModelMap model) throws Exception {



		String checkId = (String) commandMap.get("checkId");
		checkId = new String(checkId.getBytes("ISO-8859-1"), "UTF-8");

		if (checkId == null || checkId.equals(""))
			return "forward:/sys/user/urm/IdDplctCnfirmView.do";

		int usedCnt = userManageService.checkIdDplct(checkId);
		model.addAttribute("usedCnt", usedCnt);
		model.addAttribute("checkId", checkId);

		return "sys/user/urm/IdDplctCnfirm.empty";
	}

	/**
	 * 업무사용자 암호 수정처리 후 화면 이동
	 * @param model 화면모델
	 * @param commandMap 파라메터전달용 commandMap
	 * @param userSearchVO 검색조 건
	 * @param userManageVO 사용자수정정보(비밀번호)
	 * @return cmm/uss/umt/EgovUserPasswordUpdt
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/UserPasswordUpdt.do")
	public String updatePassword(ModelMap model, @RequestParam Map<String, Object> commandMap, @ModelAttribute("searchVO") UserDefaultVO userSearchVO,
			@ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {


		String oldPassword = (String) commandMap.get("oldPassword");
		String newPassword = (String) commandMap.get("newPassword");
		String newPassword2 = (String) commandMap.get("newPassword2");
		String uniqId = (String) commandMap.get("uniqId");

		boolean isCorrectPassword = false;
		UserManageVO resultVO = new UserManageVO();
		userManageVO.setPassword(newPassword);
		userManageVO.setOldPassword(oldPassword);
		userManageVO.setUniqId(uniqId);

		String resultMsg = "";
		resultVO = userManageService.selectPassword(userManageVO);
		//패스워드 암호화
		String encryptPass = FileScrty.encryptPassword(oldPassword, userManageVO.getEmplyrId());
		if (encryptPass.equals(resultVO.getPassword())) {
			if (newPassword.equals(newPassword2)) {
				isCorrectPassword = true;
			} else {
				isCorrectPassword = false;
				resultMsg = "fail.user.passwordUpdate2";
			}
		} else {
			isCorrectPassword = false;
			resultMsg = "fail.user.passwordUpdate1";
		}

		if (isCorrectPassword) {
			userManageVO.setPassword(FileScrty.encryptPassword(newPassword, userManageVO.getEmplyrId()));
			userManageService.updatePassword(userManageVO);
			model.addAttribute("userManageVO", userManageVO);
			resultMsg = "success.common.update";
		} else {
			model.addAttribute("userManageVO", userManageVO);
		}
		model.addAttribute("userSearchVO", userSearchVO);
		model.addAttribute("resultMsg", resultMsg);

		return "sys/user/urm/UserPasswordUpdt";
	}

	/**
	 * 업무사용자 암호 수정  화면 이동
	 * @param model 화면모델
	 * @param commandMap 파라메터전달용 commandMap
	 * @param userSearchVO 검색조건
	 * @param userManageVO 사용자수정정보(비밀번호)
	 * @return cmm/uss/umt/EgovUserPasswordUpdt
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/UserPasswordUpdtView.do")
	public String updatePasswordView(@RequestParam(value="reqFlag", required=false) String reqFlag, ModelMap model, @RequestParam Map<String, Object> commandMap, @ModelAttribute("searchVO") UserDefaultVO userSearchVO,
			@ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {


		String userTyForPassword = (String) commandMap.get("userTyForPassword");
		userManageVO.setUserTy(userTyForPassword);

		model.addAttribute("userManageVO", userManageVO);
		model.addAttribute("userSearchVO", userSearchVO);
		model.addAttribute("reqFlag", reqFlag);
		return "sys/user/urm/UserPasswordUpdt";
	}

	/**
	 * 아이디/패스워드 찾기로 이동한다.
	 * @param model 화면모델
	 * @return sys/user/urm/IdPwFind
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/IdPwFindView.do")
	public String findIdPw(ModelMap model, HttpServletRequest request) throws Exception {

		model.addAttribute("isAction", "N");
		model.addAttribute("pwFind", request.getParameter("pwFind"));

		return "sys/user/urm/IdPwFind";
	}

	/**
	 * 아이디/패스워드 탭메뉴를 구성한다.
	 * @param model 화면모델
	 * @return sys/user/urm/IdPwFind
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/IdPwFind.do")
	public String findIdPw(ModelMap model, @RequestParam("flag") String flag, @RequestParam("isAction") String isAction, @ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {

		String jspName = "sys/user/urm/PwFind";
		ComDefaultCodeVO vo = new ComDefaultCodeVO();

		if("ID".equals(flag)) {
			//소속기관코드를 코드정보로부터 조회
			vo.setCodeId("COM003");
			model.addAttribute("insttCode_result", cmmUseService.selectCmmCodeDetail(vo));
			model.addAttribute("emplyrId", userManageVO.getEmplyrId());
			model.addAttribute("isAction", isAction);
			model.addAttribute("userManageVO", userManageVO);

			jspName = "sys/user/urm/IdFind";
		}else{
			//비밀번호 힌트를 코드정보로 부터 조회
			vo.setCodeId("COM002");
			model.addAttribute("passwordHint_result", cmmUseService.selectCmmCodeDetail(vo));
			model.addAttribute("isAction", isAction);
			model.addAttribute("userManageVO", userManageVO);

			jspName = "sys/user/urm/PwFind";
		}
		return jspName;
	}

	/**
	 * 아이디를 찾는다
	 * @param model 화면모델
	 * @return sys/user/urm/IdPwFind
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/IdFindAction.do")
	public String findId(ModelMap model, @ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {

		userManageVO.setEmplyrId(userManageService.selectId(userManageVO));

		ComDefaultCodeVO vo = new ComDefaultCodeVO();
		vo.setCodeId("COM003");
		model.addAttribute("insttCode_result", cmmUseService.selectCmmCodeDetail(vo));
		model.addAttribute("result", userManageVO);
		model.addAttribute("isAction", "ID");
		model.addAttribute("userManageVO", userManageVO);

		return "sys/user/urm/IdPwFind";
	}
	/**
	 * 비밀번호를 찾는다
	 * @param model 화면모델
	 * @return sys/user/urm/IdPwFind
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/pwFindAction.do")
	public String findPw(ModelMap model, @ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {

		String userUniqId =userManageService.selectIdByPwFind(userManageVO);

		ComDefaultCodeVO vo = new ComDefaultCodeVO();
		vo.setCodeId("COM002");

		//새로고침시 현재탭 유지
		model.addAttribute("pwFind", "Y");

		if(userUniqId == null) {
			model.addAttribute("passwordHint_result", cmmUseService.selectCmmCodeDetail(vo));
			model.addAttribute("isAction", "N");
			model.addAttribute("userManageVO", userManageVO);
			return "sys/user/urm/IdPwFind";

		}else {
			userManageVO.setUniqId(userUniqId);

			model.addAttribute("passwordHint_result", cmmUseService.selectCmmCodeDetail(vo));

			//정보 입력 후 비밀번호 1로 초기화해주기
 			String newPassword = "1";
			userManageVO.setPassword(newPassword);
			userManageVO.setPassword(FileScrty.encryptPassword(newPassword, userManageVO.getEmplyrId()));
			userManageService.updatePassword(userManageVO);

			model.addAttribute("isAction", "PW");
			model.addAttribute("userManageVO", userManageVO);
		}


		return "sys/user/urm/IdPwFind";
	}


	/**
	 * 업무사용자 암호 초기화요청
	 * @param model 화면모델
	 * @param commandMap 파라메터전달용 commandMap
	 * @param userSearchVO 검색조 건
	 * @param userManageVO 사용자수정정보(비밀번호)
	 * @return cmm/uss/umt/EgovUserPasswordUpdt
	 * @throws Exception
	 */
	@RequestMapping(value = "/sys/user/urm/UserPasswordInit.do")
	public String updatePasswordInit(ModelMap model, @RequestParam Map<String, Object> commandMap, @ModelAttribute("searchVO") UserDefaultVO userSearchVO,
			@ModelAttribute("userManageVO") UserManageVO userManageVO) throws Exception {

		String newPassword = "1";
		String uniqId = (String) commandMap.get("uniqId");

		userManageVO.setPassword(newPassword);
		userManageVO.setUniqId(uniqId);

		userManageVO.setPassword(FileScrty.encryptPassword(newPassword, userManageVO.getEmplyrId()));
		userManageService.updatePassword(userManageVO);
		model.addAttribute("userManageVO", userManageVO);

		model.addAttribute("userSearchVO", userSearchVO);
		model.addAttribute("userManageVO", userManageVO);
		model.addAttribute("resultMsg", "success.common.update");

		return "forward:/sys/user/urm/UserSelectUpdtView.do?selectedId="+userManageVO.getUniqId();

	}
}
